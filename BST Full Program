#include<stdio.h>
#include<stdlib.h>
#define MAX 20

typedef struct treenode{

    int data;
    int height;
    struct treenode * left;
    struct treenode * right;
  
}treenode;

typedef struct BST{

    treenode * head;
    int count;
  
}BST;

typedef struct queue{
    
    treenode * list [MAX];
    int front;
    int rear;
    
}queue;

queue * createqueue(){
    
    queue * nodepath;
    nodepath = (queue*)malloc(sizeof(queue));
    nodepath->front = 0;
    nodepath->rear = 0;
    return nodepath;
    
}

void initializequeue(queue * nodepath){
    
    int i;
    nodepath->front = 0;
    nodepath->rear = 0;
    
    for(i=0;i< MAX; i++){
        nodepath->list[i] = NULL;
    }
    
}

void push(queue * nodepath , treenode * root, int front){
    
   nodepath->front = nodepath->front + 1;
   nodepath->list[front] =   root;
   
}

treenode * pop(queue * nodepath , treenode * root, int rear){
    
    root = nodepath->list[rear];
    nodepath->rear = nodepath->rear + 1;
    return root;
    
}

void display(BST * bt, queue * nodepath, treenode * root){
    
    if(bt->head == NULL){
        
        printf("Tree empty\n");
        return;
        
    }
    
    while(root != NULL){
        printf("%d\n", root->data);
    
        if(root->left != NULL){
        
            push(nodepath , root->left, nodepath-> front);
        
        }
    
        if(root->right != NULL){
        
            push(nodepath , root->right, nodepath->front);
        
        }
    
        root = pop(nodepath , root, nodepath->rear);
        display(bt, nodepath , root);
        return;
    
    }
    
}

BST * createtree(){
  
    BST * bt;
    bt = (BST*)malloc(sizeof(BST));
    bt->head = NULL;
    bt->count = 0;
    return bt;
  
}

void initialize (BST * bt, treenode * root){
    
    bt->head = root;
    bt->count = 1;
    
}

void deletetree (BST * bt, treenode * root){
    
    bt->head = NULL;
    bt->count = 0;
    root->left = NULL;
    root->right = NULL;
    
}

treenode * createnode(treenode * newnode, int number){
        
    newnode->data = number;
    newnode->height = 0;
    newnode->right = NULL;
    newnode->left = NULL;
  
}

int computeheight (treenode * root){
    
    int lh = 0, rh = 0;
    
    lh = root->left->height;
    rh = root->right->height;
    return lh-rh;
    
}    

void rotateright(treenode * prev, treenode * root, treenode * subroot){
    
    treenode * temp;
    temp = (treenode*)malloc(sizeof(treenode));
    temp = root->left;
    root->left = temp->right;
    temp->right = prev;
    
    if(prev == NULL){
        return;
    }
    
    if(root->data > prev->data){
        prev->right = temp;
        return;
    }
    
    else if(root->data < prev->data){
        prev->left = temp;
        return;
    }
    
    else{
        return;
    }

}

void rotateleft(treenode * prev, treenode * root, treenode * subroot){
    
    treenode * temp;
    temp = (treenode*)malloc(sizeof(treenode));
    temp = root->right;
    root->right = temp->left;
    temp->left = root;
    
    if(prev == NULL){
        return;
    }
    
    if(root->data < prev->data){
        prev->left = temp;
        return;
    }
    
    else if(root->data > prev->data){
        prev->right = temp;
        return;
    }
    
    else{
        return;
    }

}

void balance(treenode * prev, treenode * root, treenode * subroot){
    
    if(root->height == 2){
        
        if(subroot->height == 1 || subroot->height == 0){
            rotateleft(prev, root, subroot);
            return;
        }
        
        else{ 
            rotateright(prev, root, subroot);
            balance(prev, root, subroot);
            return;
        }
        
    }
    
    else if(root->height == -2){
        
        if(subroot->height == -1 || subroot->height == 0){
            rotateright(prev, root, subroot);
            return;
        }
        
        else{
            rotateleft(prev, root, subroot);
            balance(prev, root, subroot);
            return;
        }
        
    }
    
    else{
        
        return;
    }
    
}

void insert(treenode * prev, treenode * root, treenode * newnode, int number){
    
    if(root->data > number){
        
        if(root->left != NULL){
            insert(root, root->left, newnode, number);
            root->height = computeheight(root);
            balance(prev, root, root->left);
            return;
        }
        
        else{
            root->height = root->height + 1;
            root->left = newnode;
            return;
        }
        
    }
        
    else{
        
        if(root->right != NULL){ 
            insert(prev, root->right, newnode, number);
            root->height = computeheight(root);
            balance(prev, root, root->right);
            return;
        }
        
        else{
            root->height = prev->height - 1;  
            root->right = newnode;
            return;
        }
    
    }
    
}

int findnode(treenode * root, treenode * delnode){
        
    while(delnode->right != NULL){
            
            root = delnode;
            delnode = delnode->right;
            
    }
    
    root->right = NULL;
    return delnode->data;

}

treenode * deletenode(treenode * root, treenode * delnode , int number){
    
    if(delnode->data > number){
        
        root = delnode;
        delnode->left = deletenode(root, delnode->left, number);
        return root;
        
    }
    
    else if(delnode->data < number){
        
        root = delnode;
        delnode->right = deletenode(root, delnode->right, number);
        return root;
        
    }
    
    else if(delnode->data == number){
        
        treenode * temp;
        temp = (treenode*)malloc(sizeof(treenode));
        
        if(delnode->left == NULL && delnode->right == NULL){
                return NULL;
        }
        
        else if(delnode->right == NULL){
                return delnode->left;
        }
        
        else if(delnode->left ==  NULL){
                return delnode->right;
        }
        
        else{
                number = findnode(delnode,delnode->left);
                delnode->data = number;
                return delnode;
        }
        
    }
    
    else{
        
                return;
        
    }
    
}

int search (treenode * root, int number){
    
    if(root == NULL){
        
        printf("Number not found\n");
        
    }
    
    else if (root->data > number){
        
        search(root->left, number);
        
    }
    
    else if (root->data < number){
        
        search(root->right, number);
        
    }
    
     else{
        
        printf("Number found\n");
        
    }
    
}

void DepthFirstSearch(treenode * root){
    
    if(root != NULL){
        
        DepthFirstSearch(root->left);
        printf("%d\n",root->data);
        DepthFirstSearch(root->right);
        return;
        
    }
    
    return;
    
}

int main(){
    
    BST * bt;
    treenode * root, * newnode, * prev;
    queue * nodepath;
    nodepath = createqueue();
    initializequeue(nodepath);
    bt = createtree();
    prev = bt->head;
    root = (treenode*)malloc(sizeof(treenode));
    createnode(root, 18);
    initialize(bt, root);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 23);
    insert(prev, root, newnode, 23);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 10);
    insert(prev, root, newnode, 10);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 12);
    insert(prev, root, newnode, 12);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 8);
    insert(prev, root, newnode, 8);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 19);
    insert(prev, root, newnode, 19);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 20);
    insert(prev, root, newnode, 20);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 21);
    insert(prev, root, newnode, 21);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 25);
    insert(prev, root, newnode, 25);
    display(bt, nodepath, root);
    return 0;
    
}
