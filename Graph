#include<stdio.h>
#include<stdlib.h>
#define MAX 20

typedef struct Graph{
    
    struct graphnode * head;
    struct graphnode * solution;

}Graph;

typedef struct graphnode{
    
    int data;
    int distance;
    struct graphnode * vertexpointer;
    struct graphnode * edgepointer;
    
}graphnode;

typedef struct Stack{
    
    graphnode * listnode [MAX];
    int listdistance [MAX];
    int topnode;
    int topdistance;

}Stack;

Stack * createstack(){
    
    int i;
    Stack * nodepath;
    nodepath = (Stack*)malloc(sizeof(Stack));
    nodepath->topnode = -1;
    nodepath->topdistance = -1;

    for(i=0;i< MAX; i++){
        nodepath->listnode[i] = NULL;
    }
    
    for(i=0;i< MAX; i++){
        nodepath->listdistance[i] = 0;
    }
    
    return nodepath;
    
}

void push(Stack * nodepath, graphnode * node){
    
   int prevdistance;
  
   nodepath->topnode = nodepath->topnode + 1;
   nodepath->topdistance = nodepath->topdistance + 1;
   nodepath->listnode[nodepath->topnode] =   node;
   
   if(nodepath->topdistance == 0){
       
        nodepath->listdistance[nodepath->topdistance] = node->distance;
   }
   
   else{
       
        prevdistance = nodepath->listdistance[nodepath->topdistance - 1];
        nodepath->listdistance[nodepath->topdistance] = node->distance + prevdistance;
   }
}


Graph * creategraph(){
    
    Graph * graph;
    graph = (Graph*)malloc(sizeof(Graph));
    graph->head = NULL;
    graph->solution = NULL;
    return graph;
    
}

graphnode * isEmpty(graphnode * vertex1, graphnode * vertex){
   
    if(vertex1 == NULL){
        
        return vertex;
    }
    return vertex1;
}


graphnode * findposition(graphnode * vertex, int number){
    
    while(vertex->data != number){
        
        vertex = vertex->vertexpointer;
    }
    return vertex;
}

void insert(graphnode * vertex1, graphnode * vertex){
    
    if(vertex1->data == vertex->data){
        
        return;
    }
    
    while(vertex1->vertexpointer != NULL){
        
        if(vertex1-> data == vertex-> data){
            return;
        }
        
        else{
            vertex1 = vertex1->vertexpointer;
        }
    }
    
    vertex1->vertexpointer = vertex;
}

graphnode * createvertex(int number, Stack * nodepath){
    
    graphnode * vertex;
    vertex = (graphnode*)malloc(sizeof(graphnode));
    vertex->data = number;
    vertex->distance = 0;
    vertex->vertexpointer = NULL;
    vertex->edgepointer = NULL;
    push(nodepath, vertex);
    return vertex;

}

void createedge(graphnode * vertex, Stack * nodepath,  int number1, int number2, int distance){
    
    graphnode * vertex1, * vertex2, * vertex3, * tempvertex;
    
    vertex1 = findposition(vertex, number1);
    vertex2 = findposition(vertex, number2);
    vertex3 = createvertex(number2, nodepath);
    vertex3-> distance = distance;

    while(vertex1 != NULL){
        
        if(vertex1->data == vertex2->data){
            
            if (vertex1->distance < distance){
                continue;
            }
                
            else{
                vertex1->distance = distance;
            }
            
            return;
        }
        
        else{
            
            tempvertex = vertex1;    
            vertex1 = vertex1->edgepointer;
        }
    }
    
    tempvertex->edgepointer = vertex3;
    vertex3->vertexpointer = vertex2;
     
}

void VertexSearch(graphnode * vertex){
    
    while(vertex->vertexpointer != NULL){
        
        printf("%d\n", vertex->data);
        vertex = vertex->vertexpointer;
    }
    printf("%d\n", vertex->data);
}

void EdgeSearch(graphnode * vertex){
    
    graphnode * temp;
    temp = vertex;
    vertex = vertex->edgepointer;
    
    if(vertex == NULL){
        
        return;
    }
    
    while(vertex->edgepointer != NULL){
        
        printf("%d-", temp->data); 
        printf("%d\n", vertex->data);
        vertex = vertex->edgepointer;
    }
    printf("%d-", temp->data);
    printf("%d\n", vertex->data);
    EdgeSearch(temp->vertexpointer);
    
}

void display(Stack * nodepath){
    
    int i;
    graphnode * node;
    
    for(i=0; nodepath->listnode[i] != NULL; i++) {
        
        node = nodepath->listnode[i];
        printf("%d-", node->data);
        printf("%d\n", nodepath->listdistance[i]);
    }
}

int main(){
    
    Graph * graph;
    Stack * nodepath;
    graphnode * vertex;
    graph = creategraph();
    nodepath = createstack();
    
    vertex = createvertex(1, nodepath);
    graph->head = isEmpty(graph->head, vertex);
    insert(graph->head, vertex);
    vertex = createvertex(2, nodepath);
    insert(graph->head, vertex);
    vertex = createvertex(3, nodepath);
    insert(graph->head, vertex);
    vertex = createvertex(4, nodepath);
    insert(graph->head, vertex);
    vertex = createvertex(5, nodepath);
    insert(graph->head, vertex);
    vertex = createvertex(6, nodepath);
    insert(graph->head, vertex);
    VertexSearch(graph->head);


    createedge(graph->head, nodepath, 1, 2, 5);
    createedge(graph->head, nodepath, 1, 3, 8);
    createedge(graph->head, nodepath, 2, 3, 2);
    createedge(graph->head, nodepath, 1, 4, 6);
    createedge(graph->head, nodepath, 1, 5, 3);
    createedge(graph->head, nodepath, 4, 5, 5);
    createedge(graph->head, nodepath, 3, 6, 7);
    createedge(graph->head, nodepath, 5, 6, 3);
    EdgeSearch(graph->head);

    display(nodepath);
    
    return 0;
   
}
