#include<stdio.h>
#include<stdlib.h>
#define MAX 20

typedef struct tree{
    
    int heap[MAX];
    int top;
    
    
}tree;

void push(tree * node, int number){
    
    node->top = node->top + 1;
    node-> heap[node->top] = number;

}

int pop(tree * node){
    
    int data;
    data = node->heap[node->top] ;
    node->heap[node->top] = 0;
    node->top = node->top - 1;
    return data;
    
}

tree * initialize(){
    
    int i;
    tree * node;
    node = (tree*)malloc(sizeof(tree));
    
    for(i = 0; i< MAX; i++){
        
        node->heap[i] = 0;
        
    }
    
    node->top = -1;
    return node;
}

int findposition(tree * node, int number){
    
    int i = 0;
    
    while (node->heap[i] != number){
        i = i + 1;
    }
    
    return i;
}

void heapdown(tree * node, int initialnode){
    
    int temp, finalnode1, finalnode2, finalnode;
    
    finalnode1 = (initialnode * 2) + 1;
    finalnode2 = (initialnode * 2) + 2;

    if(node->heap[finalnode1] == 0){
        
        return;
    }
    
    if(node->heap[initialnode] < node->heap[finalnode1]){
            
            temp = node->heap[initialnode];
            node->heap[initialnode] = node->heap[finalnode1];
            node->heap[finalnode1] = temp;
            heapdown(node, finalnode1);
    }
    
    if(node->heap[finalnode2] == 0){
        
        return;
    }
        
    if(node->heap[initialnode] < node->heap[finalnode2]){
            
            temp = node->heap[initialnode];
            node->heap[initialnode] = node->heap[finalnode2];
            node->heap[finalnode2] = temp;
            heapdown(node, finalnode2);
    }
    
}

void heapup(tree * node, int initialnode){
    
    int temp, finalnode;
    
    while(initialnode >= 0){
        
          finalnode = (initialnode - 1)/2;
        
        if(node->heap[finalnode] < node->heap[initialnode]){
            
            temp = node->heap[finalnode];
            node->heap[finalnode] = node->heap[initialnode];
            node->heap[initialnode] = temp;
            initialnode = finalnode;
        }
        
        else{
            
            return;
        }
    }
    
}

void insert(tree * node, int number){
    
    int initialposition;
    push(node, number);
    initialposition = node->top;
    heapup(node, initialposition);
    
}

void deletenode(tree * node, int number){
    
    int initialposition;
    initialposition = findposition(node, number);
    number = pop(node);
    node->heap[initialposition] = number;
    heapdown(node, initialposition);
    
}

void display(tree * node){
    
    int i = 0;
    
    while(node->heap[i] != 0)
    {    
        printf("%d\n", node->heap[i]);
        i = i + 1;
    }
    
}

void main(){
    
    tree * node;
    node = initialize();
    insert(node, 50);
    insert(node, 28);
    insert(node, 40);
    insert(node, 16);
    insert(node, 24);
    insert(node, 34);
    insert(node, 38);
    insert(node, 12);
    insert(node, 14);
    insert(node, 21);
    insert(node, 23);
    insert(node, 30);
    insert(node, 32);
    insert(node, 35);
    insert(node, 37);
    insert(node, 11);
    deletenode(node, 28);
    display(node);
}
