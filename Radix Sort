#include<stdio.h>
#include<stdlib.h>

typedef struct head{
    
    struct radix * start;
    struct radix * solution;
    int count;
    
}head;

typedef struct radix{
    
    struct radix * next;
    int data;

}radix;

head * createlistheader(){
    
    head * nodepointer;
    nodepointer = (head*)malloc(sizeof(head));
    nodepointer->start = NULL; 
    nodepointer->solution = NULL;
    nodepointer->count = 0;
    return nodepointer;
    
}

radix * createnode(int value){
    
    radix * node;
    node = (radix*) malloc (sizeof(radix));
    node->next = NULL;
    node->data = value;
    return node;
    
}

void insert(head * nodepath, radix * node, radix * temp, int element){

    while(temp->next != NULL){
        
        temp = temp->next;
    }
    
    temp->next = node;
    nodepath->count = nodepath->count + 1;
    return;
}

void display(radix * node){
    
    while(node != NULL){
        
        printf("%d\n", node->data);
        node = node->next;
    }
}   

void check(head * nodepath, radix * node, radix * sol, int total){
    
    radix * prev, * start, * temp;
    start = temp = prev = node;
    

    while((start != NULL) && (start->data < sol->data)){
    
        prev = start;
        start = start->next;
    }
     
    if ((prev == start) && (total < nodepath->count)){
    
        nodepath->solution = sol;
        sol->next = start;
    }
    
    else if((prev == start) && (total > nodepath->count)){
        
        prev->data = sol->data;
    }
    
    else if(total < nodepath->count){
        
        prev->next = sol;
        sol->next = start;
    }
    
    else{
        
        while(temp != prev){
            
            temp->data = temp->next->data;
            temp = temp->next;
        }
        
        temp->data = prev->data;
        prev->data = sol->data;
    }
    
    
    return;
    
}

radix * isEmpty(radix * node, radix * temp){
    
    if(temp == NULL){
        
        return node;
    }
    
    return temp;
}


void radixsort(head * nodepath, radix * node){
    
    radix * temp, * start, * sol;
    start = node;
    int k = 10, number, c = 0;
    
    while(k <= 1000){
            
        while(start != NULL){
            
            number = start->data;
            number = number % k;
            sol = createnode(number);
            
            if(c == 0){
                nodepath->solution = isEmpty(sol, nodepath->solution);
                
            }
            
            else{
                
                check(nodepath, nodepath->solution, sol, c);
                
            }
           
            c = c + 1;
            start = start->next;
        }
        
        
    start = node;
    k = k * 10;
    
    }

}   

int main(){
 
    radix * node;
    head * nodepath;
    int i, j, k = 1, temp, element, n;
    
    nodepath = createlistheader();
    printf("Enter number of elements\n");

    node = createnode(103);
    nodepath->start = isEmpty(node, nodepath->start);
    nodepath->count = nodepath->count + 1;
    
    node  = createnode(108);
    insert(nodepath, node, nodepath->start, 108);

    node  = createnode(124);
    insert(nodepath, node, nodepath->start, 124);

    node = createnode(117);
    insert(nodepath, node, nodepath->start, 117);

    node = createnode(105);
    insert(nodepath, node, nodepath->start, 105);

    radixsort(nodepath, nodepath->start);
    display(nodepath->solution);
    
}
