#include<stdio.h>
#include<stdlib.h>
#define MAX 20

typedef struct treenode{

    int data;
    int height;
    struct treenode * left;
    struct treenode * right;
  
}treenode;

typedef struct BST{

    treenode * head;
    int count;
  
}BST;

void createtree(BST * bt){
  
    bt->head = NULL;
    bt->count = 0;

}

void initialize (BST * bt, treenode * root){
    
    bt->head = root;
    bt->count = 1;
    
}

void deletetree (BST * bt, treenode * root){
    
    bt->head = NULL;
    bt->count = 0;
    root->left = NULL;
    root->right = NULL;
    
}

treenode * createnode(treenode * newnode, int number){
        
    newnode->data = number;
    newnode->height = 0;
    newnode->right = NULL;
    newnode->left = NULL;
  
}

int computeheight (treenode * root, int lh, int rh){
    
    if(root != NULL){
    
        lh = computeheight(root->left, lh, rh);
        rh = computeheight(root->right, lh, rh);
        root->height = lh-rh;
        return rh + 1;
    }
    
    else{
    
        return lh;
    }
    
}    

treenode * rotateleft(treenode * prev, treenode * root, treenode * subroot){
    
    root->right = subroot->left;
    subroot->left = root;
    
    if(prev == NULL){
        return subroot;
    }
    
    if(root->data < prev->data){
        prev->left = subroot;
        return subroot;
    }
    
    else if(root->data > prev->data){
        prev->right = subroot;
        return subroot;
    }
    
    else{
        return subroot;
    }

}

treenode * rotateright(treenode * prev, treenode * root, treenode * subroot){
    
    root->left = subroot->right;
    subroot->right = root;
    
    if(prev ==  NULL){
        return subroot;    
    }
    
    if(root->data > prev->data){
        prev->right = subroot;
        return subroot;
    }
    
    else if(root->data < prev->data){
        prev->left = subroot;
        return subroot;
    }
    
    else{
        return subroot;
    }

}

void balance(treenode * prev, treenode * root, treenode * subroot){
    
    if(root->height == 2){
        
        if(subroot->height == 1 || subroot->height == 0){
            root = rotateright(prev, root, subroot);
        }
        
        else{ 
            subroot = rotateleft(root, subroot, subroot->right);
            balance(prev, root, subroot);
        }
        
    }
    
    else if(root->height == -2){
        
        if(subroot->height == -1 || subroot->height == 0){
            root = rotateleft(prev, root, subroot);
        }
        
        else{
            subroot = rotateright(root, subroot, subroot->left);
            balance(prev, root, subroot);
        }
        
    }
    
    else{
        
        return;
    }
    
}

void insert(treenode * prev, treenode * root, treenode * newnode, int number){
    
    if(root->data > number){
        
        if(root->left != NULL){
            insert(root, root->left, newnode, number);
            computeheight(root, 0, 0);
            balance (prev, root, root->left);
        }
        
        else{
            root->left = newnode;
            computeheight(root, 0, 0);

        }
        
    }
        
    else{
        
        if(root->right != NULL){ 
            insert(root, root->right, newnode, number);
            computeheight(root, 0, 0);
            balance(prev, root, root->right);
        }
        
        else{
            root->right = newnode;
            computeheight(root, 0, 0);
            
        }
    
    }
    
}



void DepthFirstSearch(treenode * root){
    
    if(root != NULL){
        
        printf("%d\n", root->height);
        DepthFirstSearch(root->left);
        DepthFirstSearch(root->right);
        return;
        
    }
    
    return;
    
}

int main(){
    
    BST * bt;
    treenode * root, * newnode, * prev, *newnode1;
    bt = (BST*)malloc(sizeof(BST));
    createtree(bt);
    prev = bt->head;
    root = (treenode*)malloc(sizeof(treenode));
    createnode(root, 12);
    initialize(bt, root);
    newnode = (treenode*)malloc(sizeof(treenode));
    createnode(newnode, 14);
    insert(prev, root, newnode, 14);
    newnode1 = (treenode*)malloc(sizeof(treenode));
    createnode(newnode1, 13);
    insert(prev, root, newnode1, 13);
    DepthFirstSearch(newnode);
    return 0;
    
}
