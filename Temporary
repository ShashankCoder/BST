#include<stdio.h>
#include<stdlib.h>
#define MAX 20

typedef struct Graph{
    
    struct graphnode * head;
    struct graphnode * solution;

}Graph;

typedef struct graphnode{
    
    int data;
    int repeat;
    int distance;
    struct graphnode * vertexpointer;
    struct graphnode * edgepointer;
    
}graphnode;

typedef struct Stack{
    
    graphnode * listnode [MAX];
    int listdistance [MAX];
    int topnode;
    int topdistance;

}Stack;

Stack * createstack(){
    
    int i;
    Stack * nodepath;
    nodepath = (Stack*)malloc(sizeof(Stack));
    nodepath->topnode = -1;
    nodepath->topdistance = -1;

    for(i=0;i< MAX; i++){
        nodepath->listnode[i] = NULL;
    }
    
    for(i=0;i< MAX; i++){
        nodepath->listdistance[i] = 0;
    }
    
    return nodepath;
    
}

void push(Stack * nodepath, graphnode * node){
    
   int prevdistance;
  
   nodepath->topnode = nodepath->topnode + 1;
   nodepath->topdistance = nodepath->topdistance + 1;
   nodepath->listnode[nodepath->topnode] =   node;
   
   if(nodepath->topdistance == 0){
       
        nodepath->listdistance[nodepath->topdistance] = node->distance;
   }
   
   else{
       
        prevdistance = nodepath->listdistance[nodepath->topdistance - 1];
        nodepath->listdistance[nodepath->topdistance] = node->distance + prevdistance;
   }
}

graphnode * pop(Stack * nodepath){
    
    graphnode * node;
    node = nodepath->listnode[nodepath->topnode];
    nodepath->topnode = nodepath->topnode - 1;
    nodepath->topdistance = nodepath->topdistance - 1;
    return node;
    
}

graphnode * topnode(Stack * nodepath){
    
    graphnode * node;
    node = nodepath->listnode[nodepath->topnode];
    return node ;
    
}

int topdistance( Stack * nodepath){
    
    int data;
    data = nodepath->listdistance[nodepath->topdistance];
    return data;
    
}

Graph * creategraph(){
    
    Graph * graph;
    graph = (Graph*)malloc(sizeof(Graph));
    graph->head = NULL;
    graph->solution = NULL;
    return graph;
    
}

graphnode * isEmpty(graphnode * vertex1, graphnode * vertex){
   
    if(vertex1 == NULL){
        
        return vertex;
    }
    return vertex1;
}


graphnode * findposition(graphnode * vertex, int number){
    
    while(vertex->data != number){
        
        vertex = vertex->vertexpointer;
    }
    return vertex;
}

void insert(graphnode * vertex1, graphnode * vertex){
    
    if(vertex1->data == vertex->data){
        
        return;
    }
    
    while(vertex1->vertexpointer != NULL){
        
        if(vertex1-> data == vertex-> data){
            return;
        }
        
        else{
            vertex1 = vertex1->vertexpointer;
        }
    }
    
    vertex1->vertexpointer = vertex;
}

graphnode * createvertex(int number){
    
    graphnode * vertex;
    vertex = (graphnode*)malloc(sizeof(graphnode));
    vertex->data = number;
    vertex->distance = 0;
    vertex->repeat = 0;
    vertex->vertexpointer = NULL;
    vertex->edgepointer = NULL;
    return vertex;

}

void createedge(graphnode * vertex, int number1, int number2, int distance){
    
    graphnode * vertex1, * vertex2, * vertex3, * tempvertex;
    
    vertex1 = findposition(vertex, number1);
    vertex2 = findposition(vertex, number2);
    vertex3 = createvertex(number2);
    vertex3-> distance = distance;

    while(vertex1 != NULL){
        
        if(vertex1->data == vertex2->data){
            
            if (vertex1->distance < distance){
                continue;
            }
                
            else{
                vertex1->distance = distance;
            }
            
            return;
        }
        
        else{
            
            tempvertex = vertex1;    
            vertex1 = vertex1->edgepointer;
        }
    }
    
    tempvertex->edgepointer = vertex3;
    vertex3->vertexpointer = vertex2;
     
}

graphnode * SmallestPath(Stack * nodepath, Graph * graph, graphnode * node){
    
    graphnode * source, * destination, * temp, * vertex;
    int distance;

    source = node;
    push(nodepath, source);
    
    vertex = createvertex(source->data);
    graph->solution = isEmpty(graph->solution, vertex);
    insert(graph->solution, vertex);
    
    if(source == NULL){
        
        return;
    }
    
    while(source != NULL){
        
        destination = source->edgepointer;
                
            while(destination != NULL){
                
                if(destination->repeat != 1){
                    
                        destination->repeat = 1;
                        push(nodepath, destination);
                        
                        vertex = createvertex(destination->data);
                        insert(graph->solution, vertex);
                        distance = topdistance(nodepath);
                        createedge(graph->solution, source->data, destination->data, distance);
                        
                        temp = destination->vertexpointer;
                        destination = temp->edgepointer;
                }
                
            }
        
        source = topnode(nodepath); 
        pop(nodepath);
              
    }
    
    SmallestPath(nodepath, graph, node->vertexpointer);
    return;
}

void displaypath(graphnode * source){
    
    graphnode * destination;
    
    while(source != NULL){
        
        destination = source->edgepointer;
        
        while(destination != NULL){
            
            printf("%d-", source->data);
            printf("%d\n", destination->data);
            printf("%d\n", destination->distance);
            destination = destination->edgepointer;
        }
        
        source = source->vertexpointer;
    }
}

int main(){
    
    Graph * graph;
    graphnode * vertex;
    Stack * nodepath;
    nodepath = createstack();
    graph = creategraph();
    
    vertex = createvertex(1);
    graph->head = isEmpty(graph->head, vertex);
    insert(graph->head, vertex);
    vertex = createvertex(2);
    insert(graph->head, vertex);
    vertex = createvertex(3);
    insert(graph->head, vertex);
    vertex = createvertex(4);
    insert(graph->head, vertex);
    vertex = createvertex(5);
    insert(graph->head, vertex);
    vertex = createvertex(6);
    insert(graph->head, vertex);

    createedge(graph->head, 1, 2, 5);
    createedge(graph->head, 1, 3, 8);
    createedge(graph->head, 2, 3, 2);
    createedge(graph->head, 1, 4, 6);
    createedge(graph->head, 1, 5, 3);
    createedge(graph->head, 4, 5, 5);
    createedge(graph->head, 3, 6, 7);
    createedge(graph->head, 5, 6, 3);

    SmallestPath(nodepath, graph, graph->head);
    return 0;
   
}
